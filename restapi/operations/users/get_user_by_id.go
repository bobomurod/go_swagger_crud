// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
)

// GetUserByIDHandlerFunc turns a function with the right signature into a get user by Id handler
type GetUserByIDHandlerFunc func(GetUserByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUserByIDHandlerFunc) Handle(params GetUserByIDParams) middleware.Responder {
	return fn(params)
}

// GetUserByIDHandler interface for that can handle valid get user by Id params
type GetUserByIDHandler interface {
	Handle(GetUserByIDParams) middleware.Responder
}

// NewGetUserByID creates a new http.Handler for the get user by Id operation
func NewGetUserByID(ctx *middleware.Context, handler GetUserByIDHandler) *GetUserByID {
	return &GetUserByID{Context: ctx, Handler: handler}
}

/*GetUserByID swagger:route GET /users/{userId} users getUserById

Returns user by id

Returns user by id (only for nonadministrative users)

*/
type GetUserByID struct {
	Context *middleware.Context
	Handler GetUserByIDHandler
}

func (o *GetUserByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetUserByIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetUserByIDBadRequestBody get user by ID bad request body
// swagger:model GetUserByIDBadRequestBody
type GetUserByIDBadRequestBody struct {

	// error message
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this get user by ID bad request body
func (o *GetUserByIDBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetUserByIDBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserByIDBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetUserByIDBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetUserByIDInternalServerErrorBody get user by ID internal server error body
// swagger:model GetUserByIDInternalServerErrorBody
type GetUserByIDInternalServerErrorBody struct {

	// error message
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this get user by ID internal server error body
func (o *GetUserByIDInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetUserByIDInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserByIDInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetUserByIDInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetUserByIDNotFoundBody get user by ID not found body
// swagger:model GetUserByIDNotFoundBody
type GetUserByIDNotFoundBody struct {

	// error message
	ErrorMessage string `json:"errorMessage,omitempty"`
}

// Validate validates this get user by ID not found body
func (o *GetUserByIDNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetUserByIDNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserByIDNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetUserByIDNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
