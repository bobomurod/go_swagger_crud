// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Prototpe API for test purposes",
    "title": "Learning example Users API",
    "version": "0.0.1"
  },
  "host": "localhost:9000",
  "basePath": "/v1",
  "paths": {
    "/users": {
      "get": {
        "description": "Returns all users list for test",
        "tags": [
          "users"
        ],
        "summary": "Returns all users list",
        "operationId": "getUsers",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "Adds user with specified parameters",
        "tags": [
          "users"
        ],
        "summary": "Adds user",
        "operationId": "addUser",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User added",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "description": "Returns user by id (only for nonadministrative users)",
        "tags": [
          "users"
        ],
        "summary": "Returns user by id",
        "operationId": "getUserById",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "description": "Updates user by id",
        "tags": [
          "users"
        ],
        "summary": "Updates user by id",
        "operationId": "updateUserById",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdPath"
          },
          {
            "name": "user",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "description": "Deletes user by specified id",
        "tags": [
          "users",
          "_delete"
        ],
        "summary": "Deletes user",
        "operationId": "delUser",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdPath"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "description": "User",
      "type": "object",
      "required": [
        "username"
      ],
      "properties": {
        "userId": {
          "type": "integer"
        },
        "username": {
          "type": "string"
        }
      },
      "example": {
        "userId": 1,
        "username": "Vasya Pupkin"
      }
    }
  },
  "parameters": {
    "UserIdPath": {
      "type": "integer",
      "name": "userId",
      "in": "path",
      "required": true
    }
  },
  "responses": {
    "200": {
      "description": "OK"
    },
    "400": {
      "description": "Invalid request",
      "schema": {
        "type": "object",
        "properties": {
          "errorMessage": {
            "type": "string"
          }
        }
      }
    },
    "404": {
      "description": "Not found",
      "schema": {
        "type": "object",
        "properties": {
          "errorMessage": {
            "type": "string"
          }
        }
      }
    },
    "500": {
      "description": "Something went wrong",
      "schema": {
        "type": "object",
        "properties": {
          "errorMessage": {
            "type": "string"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "users"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Prototpe API for test purposes",
    "title": "Learning example Users API",
    "version": "0.0.1"
  },
  "host": "localhost:9000",
  "basePath": "/v1",
  "paths": {
    "/users": {
      "get": {
        "description": "Returns all users list for test",
        "tags": [
          "users"
        ],
        "summary": "Returns all users list",
        "operationId": "getUsers",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "schema": {
              "type": "object",
              "properties": {
                "errorMessage": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Adds user with specified parameters",
        "tags": [
          "users"
        ],
        "summary": "Adds user",
        "operationId": "addUser",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User added",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "type": "object",
              "properties": {
                "errorMessage": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "schema": {
              "type": "object",
              "properties": {
                "errorMessage": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "description": "Returns user by id (only for nonadministrative users)",
        "tags": [
          "users"
        ],
        "summary": "Returns user by id",
        "operationId": "getUserById",
        "parameters": [
          {
            "type": "integer",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "type": "object",
              "properties": {
                "errorMessage": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "type": "object",
              "properties": {
                "errorMessage": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "schema": {
              "type": "object",
              "properties": {
                "errorMessage": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Updates user by id",
        "tags": [
          "users"
        ],
        "summary": "Updates user by id",
        "operationId": "updateUserById",
        "parameters": [
          {
            "type": "integer",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "user",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "type": "object",
              "properties": {
                "errorMessage": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "type": "object",
              "properties": {
                "errorMessage": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "schema": {
              "type": "object",
              "properties": {
                "errorMessage": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes user by specified id",
        "tags": [
          "users",
          "_delete"
        ],
        "summary": "Deletes user",
        "operationId": "delUser",
        "parameters": [
          {
            "type": "integer",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "type": "object",
              "properties": {
                "errorMessage": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "type": "object",
              "properties": {
                "errorMessage": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "schema": {
              "type": "object",
              "properties": {
                "errorMessage": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "description": "User",
      "type": "object",
      "required": [
        "username"
      ],
      "properties": {
        "userId": {
          "type": "integer"
        },
        "username": {
          "type": "string"
        }
      },
      "example": {
        "userId": 1,
        "username": "Vasya Pupkin"
      }
    }
  },
  "parameters": {
    "UserIdPath": {
      "type": "integer",
      "name": "userId",
      "in": "path",
      "required": true
    }
  },
  "responses": {
    "200": {
      "description": "OK"
    },
    "400": {
      "description": "Invalid request",
      "schema": {
        "type": "object",
        "properties": {
          "errorMessage": {
            "type": "string"
          }
        }
      }
    },
    "404": {
      "description": "Not found",
      "schema": {
        "type": "object",
        "properties": {
          "errorMessage": {
            "type": "string"
          }
        }
      }
    },
    "500": {
      "description": "Something went wrong",
      "schema": {
        "type": "object",
        "properties": {
          "errorMessage": {
            "type": "string"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "users"
    }
  ]
}`))
}
