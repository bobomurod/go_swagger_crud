// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// DelUserOKCode is the HTTP code returned for type DelUserOK
const DelUserOKCode int = 200

/*DelUserOK OK

swagger:response delUserOK
*/
type DelUserOK struct {
}

// NewDelUserOK creates DelUserOK with default headers values
func NewDelUserOK() *DelUserOK {

	return &DelUserOK{}
}

// WriteResponse to the client
func (o *DelUserOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// DelUserBadRequestCode is the HTTP code returned for type DelUserBadRequest
const DelUserBadRequestCode int = 400

/*DelUserBadRequest Invalid request

swagger:response delUserBadRequest
*/
type DelUserBadRequest struct {

	/*
	  In: Body
	*/
	Payload *DelUserBadRequestBody `json:"body,omitempty"`
}

// NewDelUserBadRequest creates DelUserBadRequest with default headers values
func NewDelUserBadRequest() *DelUserBadRequest {

	return &DelUserBadRequest{}
}

// WithPayload adds the payload to the del user bad request response
func (o *DelUserBadRequest) WithPayload(payload *DelUserBadRequestBody) *DelUserBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the del user bad request response
func (o *DelUserBadRequest) SetPayload(payload *DelUserBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DelUserBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DelUserNotFoundCode is the HTTP code returned for type DelUserNotFound
const DelUserNotFoundCode int = 404

/*DelUserNotFound Not found

swagger:response delUserNotFound
*/
type DelUserNotFound struct {

	/*
	  In: Body
	*/
	Payload *DelUserNotFoundBody `json:"body,omitempty"`
}

// NewDelUserNotFound creates DelUserNotFound with default headers values
func NewDelUserNotFound() *DelUserNotFound {

	return &DelUserNotFound{}
}

// WithPayload adds the payload to the del user not found response
func (o *DelUserNotFound) WithPayload(payload *DelUserNotFoundBody) *DelUserNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the del user not found response
func (o *DelUserNotFound) SetPayload(payload *DelUserNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DelUserNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DelUserInternalServerErrorCode is the HTTP code returned for type DelUserInternalServerError
const DelUserInternalServerErrorCode int = 500

/*DelUserInternalServerError Something went wrong

swagger:response delUserInternalServerError
*/
type DelUserInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *DelUserInternalServerErrorBody `json:"body,omitempty"`
}

// NewDelUserInternalServerError creates DelUserInternalServerError with default headers values
func NewDelUserInternalServerError() *DelUserInternalServerError {

	return &DelUserInternalServerError{}
}

// WithPayload adds the payload to the del user internal server error response
func (o *DelUserInternalServerError) WithPayload(payload *DelUserInternalServerErrorBody) *DelUserInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the del user internal server error response
func (o *DelUserInternalServerError) SetPayload(payload *DelUserInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DelUserInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
